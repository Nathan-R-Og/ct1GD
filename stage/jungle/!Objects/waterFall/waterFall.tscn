[gd_scene load_steps=6 format=2]

[ext_resource path="res://stage/jungle/!Objects/waterFall/waterFall.bpm.bmp" type="Texture" id=1]

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;


void euler_angle_XYZ_to_mat4(in vec3 rot, out mat4 rot_mat) {
    mat3 rx = mat3(vec3(1, 0, 0),
                   vec3(0, cos(rot.x), sin(rot.x)),
                   vec3(0, -sin(rot.x), cos(rot.x)));
    mat3 ry = mat3(vec3(cos(rot.y), 0, -sin(rot.y)),
                   vec3(0, 1, 0),
                   vec3(sin(rot.y), 0, cos(rot.y)));
    mat3 rz = mat3(vec3(cos(rot.z), sin(rot.z), 0),
                   vec3(-sin(rot.z), cos(rot.z), 0),
                   vec3(0, 0, 1));
    rot_mat = mat4(rz * ry * rx);
}


void location_to_mat4(in vec3 loc, out mat4 loc_mat) {
    loc_mat = mat4(vec4(1.0, 0.0, 0.0, 0),
                   vec4(0.0, 1.0, 0.0, 0),
                   vec4(0.0, 0.0, 1.0, 0),
                   vec4(loc, 1.0));
}


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}


void scale_to_mat4(in vec3 scale, out mat4 scale_mat) {
    scale_mat = mat4(vec4(scale.x, 0.0, 0.0, 0.0),
                     vec4(0.0, scale.y, 0.0, 0.0),
                     vec4(0.0, 0.0, scale.z, 0.0),
                     vec4(0.0, 0.0, 0.0, 1.0));
}

void vertex () {
}

void fragment () {
	
	// node: 'Texture Coordinate'
	// type: 'ShaderNodeTexCoord'
	// input sockets handling
	// output sockets definitions
	vec3 node0_out0_uv;
	
	node0_out0_uv = vec3(UV, 0.0);
	
	
	// node: 'Mapping'
	// type: 'ShaderNodeMapping'
	// input sockets handling
	vec3 node1_in0_vector = node0_out0_uv;
	vec3 node1_in1_location = vec3(0.0, 0.1666666865348816, 0.0);
	vec3 node1_in2_rotation = vec3(0.0, 0.0, 0.0);
	vec3 node1_in3_scale = vec3(1.0, 1.0, 1.0);
	// output sockets definitions
	vec3 node1_out0_vector;
	
	// Mapping type: POINT
	mat4 node1_var0_location;
	location_to_mat4(node1_in1_location, node1_var0_location);
	mat4 node1_var1_rotation;
	euler_angle_XYZ_to_mat4(node1_in2_rotation, node1_var1_rotation);
	mat4 node1_var2_scale;
	scale_to_mat4(node1_in3_scale, node1_var2_scale);
	mat4 node1_var3_xform_mat = node1_var0_location * node1_var1_rotation *
		node1_var2_scale;
	node1_out0_vector = (node1_var3_xform_mat * vec4(node1_in0_vector, 1.0)).xyz;
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node2_in0_vector = node1_out0_vector;
	// output sockets definitions
	vec4 node2_out0_color;
	float node2_out1_alpha;
	
	node_tex_image(node2_in0_vector, texture_0, node2_out0_color, node2_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node3_in0_basecolor = node2_out0_color;
	float node3_in1_subsurface = float(0.0);
	vec3 node3_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node3_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node3_in4_metallic = float(0.0);
	float node3_in5_specular = float(0.0);
	float node3_in6_speculartint = float(0.0);
	float node3_in7_roughness = float(1.0);
	float node3_in8_anisotropic = float(0.0);
	float node3_in9_anisotropicrotation = float(0.0);
	float node3_in10_sheen = float(0.0);
	float node3_in11_sheentint = float(0.5);
	float node3_in12_clearcoat = float(0.0);
	float node3_in13_clearcoatroughness = float(0.029999999329447746);
	float node3_in14_ior = float(1.0);
	float node3_in15_transmission = float(0.0);
	float node3_in16_transmissionroughness = float(0.0);
	vec4 node3_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node3_in18_emissionstrength = float(1.0);
	float node3_in19_alpha = float(1.0);
	vec3 node3_in20_normal = NORMAL;
	vec3 node3_in21_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node3_in22_tangent = TANGENT;
	// output sockets definitions
	vec3 node3_bsdf_out0_albedo;
	float node3_bsdf_out1_sss_strength;
	float node3_bsdf_out3_specular;
	float node3_bsdf_out2_metallic;
	float node3_bsdf_out4_roughness;
	float node3_bsdf_out5_clearcoat;
	float node3_bsdf_out6_clearcoat_gloss;
	float node3_bsdf_out7_anisotropy;
	float node3_bsdf_out8_transmission;
	float node3_bsdf_out9_ior;
	
	node_bsdf_principled(node3_in0_basecolor, node3_in1_subsurface,
		node3_in3_subsurfacecolor, node3_in4_metallic, node3_in5_specular,
		node3_in7_roughness, node3_in12_clearcoat, node3_in13_clearcoatroughness,
		node3_in8_anisotropic, node3_in15_transmission, node3_in14_ior,
		node3_bsdf_out0_albedo, node3_bsdf_out1_sss_strength, node3_bsdf_out2_metallic,
		node3_bsdf_out3_specular, node3_bsdf_out4_roughness, node3_bsdf_out5_clearcoat,
		node3_bsdf_out6_clearcoat_gloss, node3_bsdf_out7_anisotropy,
		node3_bsdf_out8_transmission, node3_bsdf_out9_ior);
	
	
	ALBEDO = node3_bsdf_out0_albedo;
	SSS_STRENGTH = node3_bsdf_out1_sss_strength;
	SPECULAR = node3_bsdf_out3_specular;
	METALLIC = node3_bsdf_out2_metallic;
	ROUGHNESS = node3_bsdf_out4_roughness;
	CLEARCOAT = node3_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node3_bsdf_out6_clearcoat_gloss;
	NORMAL = node3_in20_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node3_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node3_in22_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node3_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 1 )

[sub_resource type="ArrayMesh" id=3]
resource_name = "ShapeIndexedFaceSet86_ShapeIndexedFaceSet011"
surfaces/0 = {
"aabb": AABB( -1.52998, -1.49997, -1.73996, 3.09996, 2.99994, 3.69992 ),
"array_data": PoolByteArray( 150, 9, 151, 191, 192, 203, 204, 190, 226, 192, 117, 61, 170, 86, 223, 0, 89, 89, 0, 129, 246, 193, 30, 186, 98, 214, 195, 191, 248, 255, 31, 181, 248, 223, 250, 63, 170, 86, 222, 0, 89, 89, 0, 129, 236, 193, 66, 189, 24, 193, 245, 188, 4, 255, 191, 63, 248, 223, 250, 63, 170, 86, 222, 0, 89, 89, 0, 129, 188, 190, 66, 189, 98, 214, 163, 62, 37, 204, 140, 63, 238, 193, 117, 61, 190, 66, 172, 0, 89, 89, 0, 129, 210, 190, 30, 186, 98, 214, 131, 191, 176, 254, 255, 190, 96, 91, 15, 190, 188, 68, 175, 0, 89, 89, 0, 129, 236, 193, 57, 185, 236, 162, 240, 62, 160, 254, 127, 63, 96, 91, 15, 190, 1, 255, 130, 0, 89, 89, 0, 129, 188, 190, 57, 185, 18, 132, 107, 190, 37, 204, 140, 191, 163, 91, 15, 190, 178, 78, 195, 0, 89, 89, 0, 129, 192, 193, 199, 178, 232, 193, 149, 63, 175, 152, 153, 62, 163, 91, 15, 190, 177, 79, 198, 0, 89, 89, 0, 129, 188, 190, 199, 178, 27, 245, 200, 63, 192, 203, 204, 190, 2, 183, 222, 191, 176, 80, 201, 0, 89, 89, 0, 129, 63, 191, 95, 54, 236, 162, 240, 62, 4, 255, 191, 191, 2, 183, 222, 191, 176, 80, 201, 0, 89, 89, 0, 129, 127, 193, 95, 54 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 2, 0, 0, 0, 3, 0, 4, 0, 3, 0, 0, 0, 3, 0, 4, 0, 5, 0, 6, 0, 8, 0, 7, 0, 6, 0, 5, 0, 4, 0, 6, 0, 7, 0, 5, 0, 8, 0, 6, 0, 9, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 24,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 10
}

[sub_resource type="Animation" id=4]
resource_name = "water"
length = 0.001

[node name="waterFall" type="Spatial"]

[node name="waterFall1" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, -1, 0, 1, -1.62921e-07, 0, 0, 0 )
mesh = SubResource( 3 )
material/0 = null

[node name="AnimationPlayer" type="AnimationPlayer" parent="waterFall1"]
anims/Action.001 = SubResource( 4 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 0.0911344, 0.694127, -0.71406, -0.0458024, 0.719207, 0.693284, 0.994785, -0.0304764, 0.0973372, -8.80137, 8.65799, 1.02215 )
fov = 39.5978
size = 6.0
near = 0.1
far = 1000.0
